type: edu
custom_name: stage6
files:
  - name: test/CoffeeMachineTest.java
    visible: false
    text: |
      import machine.CoffeeMachine;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;

      import java.util.ArrayList;
      import java.util.List;


      class TestClue {
          int water;
          int milk;
          int beans;
          int cups;
          int money;
          String feedback;
          TestClue(int w, int m, int b, int c, int mo, String feedback) {
              water = w;
              milk = m;
              beans = b;
              cups = c;
              money = mo;
              this.feedback = feedback;
          }
      }

      public class CoffeeMachineTest extends StageTest<TestClue> {

          public CoffeeMachineTest() {
              super(CoffeeMachine.class);
          }

          @Override
          public List<TestCase<TestClue>> generate() {
              return List.of(
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          700 - 400,
                          390 - 540,
                          80 - 120 ,
                          7 - 9,
                          0 - 550,
                          "This test is exactly " +
                              "like in the example - try to run it by yourself"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "2\n" +
                              "buy\n" +
                              "2\n" +
                              "fill\n" +
                              "1000\n" +
                              "0\n" +
                              "0\n" +
                              "0\n" +
                              "buy\n" +
                              "2\n" +
                              "take\n" +
                              "remaining\n" +
                              "exit\n"),

                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          3000,
                          3000,
                          3000 ,
                          3000,
                          0,
                          "This test checks \"fill\" action"))
                      .setInput(
                          "remaining\n" +
                              "fill\n" +
                              "3000\n" +
                              "3000\n" +
                              "3000\n" +
                              "3000\n" +
                              "remaining\n" +
                              "exit\n"),

                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          -250,
                          0,
                          -16 ,
                          -1,
                          4, "This test checks \"buy\" " +
                          "action with the first variant of coffee"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "1\n" +
                              "remaining\n" +
                              "exit\n"),

                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          -350,
                          -75,
                          -20 ,
                          -1,
                          7, "This test checks \"buy\" " +
                          "action with the second variant of coffee"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "2\n" +
                              "remaining\n" +
                              "exit\n"),

                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          -200,
                          -100,
                          -12 ,
                          -1,
                          6, "This test checks \"buy\" " +
                          "action with the third variant of coffee"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "3\n" +
                              "remaining\n" +
                              "exit\n"),

                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          0,
                          0,
                          0 ,
                          0,
                          -550, "This test checks \"take\" action"))
                      .setInput(
                          "remaining\n" +
                              "take\n" +
                              "remaining\n" +
                              "exit\n"),

                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          0,
                          0,
                          0 ,
                          0,
                          0, "This test checks \"back\" " +
                          "action right after \"buy\" action"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "back\n" +
                              "remaining\n" +
                              "exit\n")
              );
          }

          @Override
          public CheckResult check(String reply, TestClue clue) {
              String[] lines = reply.split("\\n");

              if (lines.length <= 1) {
                  return CheckResult.wrong("");
              }

              int water_ = clue.water;
              int milk_ = clue.milk;
              int beans_ = clue.beans;
              int cups_ = clue.cups;
              int money_ = clue.money;

              List<Integer> milk = new ArrayList<>();
              List<Integer> water = new ArrayList<>();
              List<Integer> beans = new ArrayList<>();
              List<Integer> cups = new ArrayList<>();
              List<Integer> money = new ArrayList<>();

              for (String line : lines) {
                  line = line.replace("$", "").trim();
                  String[] words = line.split("\\s+");
                  if (words.length == 0) {
                      continue;
                  }
                  String firstWord = words[0];
                  int amount;
                  try {
                      amount = Integer.parseInt(firstWord);
                  }
                  catch (Exception e) {
                      continue;
                  }
                  if (line.contains("milk")) {
                      milk.add(amount);
                  }
                  else if (line.contains("water")) {
                      water.add(amount);
                  }
                  else if (line.contains("beans")) {
                      beans.add(amount);
                  }
                  else if (line.contains("cups")) {
                      cups.add(amount);
                  }
                  else if (line.contains("money")) {
                      money.add(amount);
                  }
              }

              if (milk.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"milk\", " +
                          "found: " + milk.size());
              }

              if (water.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"water\", " +
                          "found: " + water.size());
              }

              if (beans.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"beans\", " +
                          "found: " + beans.size());
              }

              if (cups.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"cups\", " +
                          "found: " + cups.size());
              }

              if (money.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"money\", " +
                          "found: " + money.size());
              }

              int milk0 = milk.get(0);
              int milk1 = milk.get(milk.size() - 1);

              int water0 = water.get(0);
              int water1 = water.get(water.size() - 1);

              int beans0 = beans.get(0);
              int beans1 = beans.get(beans.size() - 1);

              int cups0 = cups.get(0);
              int cups1 = cups.get(cups.size() - 1);

              int money0 = money.get(0);
              int money1 = money.get(money.size() - 1);

              int diffWater = water1 - water0;
              int diffMilk = milk1 - milk0;
              int diffBeans = beans1 - beans0;
              int diffCups = cups1 - cups0;
              int diffMoney = money1 - money0;

              boolean isCorrect =
                  diffWater == water_ &&
                      diffMilk == milk_ &&
                      diffBeans == beans_ &&
                      diffCups == cups_ &&
                      diffMoney == money_;

              return new CheckResult(isCorrect, clue.feedback);
          }
      }
    learner_created: false
  - name: src/machine/CoffeeMachine.java
    visible: true
    text: |-
      package machine;

      import java.util.Scanner;

      public class CoffeeMachine {
          private static final Scanner scanner = new Scanner(System.in);
          private static int waterAmount = 400;
          private static int milkAmount = 540;
          private static int coffeeBeanAmount = 120;
          private static int cupAmount = 9;
          private static int moneyAmount = 550;


          public static void main(String[] args) {
              action();
          }

          public static void action() {
              System.out.println("Write action (buy, fill, take, remaining, exit):");
              String act = scanner.next();
              switch (act) {
                  case "buy":
                      buyAction();
                      action();
                      break;
                  case "fill":
                      fillAction();
                      action();
                      break;
                  case "take":
                      takeMoneyAction();
                      action();
                      break;
                  case "remaining":
                      remainingAction();
                      action();
                      break;
                  case "exit":
                      System.exit(0);
                  default:
                      System.out.println("Incorrect input, please try again.");
                      action();
                      break;
              }
          }

          public static void buyAction() {
              String message = "\nWhat do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:";
              System.out.println(message);
              switch (scanner.next()) {
                  case "1":
                      espresso(1);
                      break;
                  case "2":
                      latte(1);
                      break;
                  case "3":
                      cappuccino(1);

                      break;
                  case "back":
                      action();
                      break;
                  default:
                      System.out.println("Incorrect input, please try again.");
                      buyAction();

              }
          }

          public static void counter(int water, int milk, int bean, int price, int quantity) {
              int waterPortion = waterAmount / (water * quantity);
              if (milk == 0) {
                  milk = 1;
              }
              int milkPortion = milkAmount / (milk * quantity);
              if (milk == 1) {
                  milk = 0;
              }
              int beanPortion = coffeeBeanAmount / (bean * quantity);
              int cupsPortion = cupAmount / quantity;

              int availableCoffee = Math.min(Math.min(waterPortion, milkPortion), Math.min(beanPortion, cupsPortion));
              String s = "water, milk, coffee beans, disposable cups";
              if (availableCoffee != waterPortion) {
                  s = s.replace("water, ", "");
              }
              if (availableCoffee != milkPortion) {
                  s = s.replace("milk, ", "");
              }
              if (availableCoffee != beanPortion) {
                  s = s.replace("coffee beans, ", "");
              }
              if (availableCoffee != cupsPortion) {
                  s = s.replace("disposable cups", "");
              }
              s = s.trim();
              if (s.endsWith(",")) {
                  s = s.substring(0, s.length() - 1);
              }
              if (s.contains(",")) {
                  StringBuilder tempS = new StringBuilder(s);
                  tempS.insert(tempS.lastIndexOf(","), " and");
                  tempS.deleteCharAt(tempS.lastIndexOf(","));
                  s = String.valueOf(tempS);
              }

              if (quantity <= availableCoffee) {
                  waterAmount -= water * quantity;
                  milkAmount -= milk * quantity;
                  coffeeBeanAmount -= bean * quantity;
                  cupAmount -= quantity;
                  moneyAmount += price * quantity;
                  System.out.println("I have enough resources, making you a coffee!\n");
              } else System.out.println("Sorry, not enough " + s + "!\n");
              // else System.out.println("Sorry, not " + availableCoffee + " cup(s) of coffee");
          }

          public static void espresso(int quantity) {
              int waterEspressoRation = 250;
              int milkEspressoRation = 0;
              int coffeeEspressoBeanRation = 16;
              int moneyPriceEspresso = 4;
              counter(waterEspressoRation, milkEspressoRation, coffeeEspressoBeanRation, moneyPriceEspresso, quantity);
          }

          public static void latte(int quantity) {
              int waterLateRation = 350;
              int milkLatteRation = 75;
              int coffeeBeanLateRation = 20;
              int moneyPriceLatte = 7;
              counter(waterLateRation, milkLatteRation, coffeeBeanLateRation, moneyPriceLatte, quantity);
          }

          public static void cappuccino(int quantity) {
              int waterCappuccinoRation = 200;
              int milkCappuccinoRation = 100;
              int coffeeBeanCappuccinoRation = 12;
              int moneyPriceCappuccino = 6;
              counter(waterCappuccinoRation, milkCappuccinoRation, coffeeBeanCappuccinoRation, moneyPriceCappuccino, quantity);
          }

          public static void fillAction() {
              System.out.println("\nWrite how many ml of water do you want to add:");
              waterAmount += scanner.nextInt();

              System.out.println("Write how many ml of milk do you want to add:");
              milkAmount += scanner.nextInt();

              System.out.println("Write how many grams of coffee do you want to add:");
              coffeeBeanAmount += scanner.nextInt();

              System.out.println("Write how many disposable cups of coffee beans do you want to add:");
              cupAmount += scanner.nextInt();
              System.out.println("");
          }

          public static void takeMoneyAction() {
              System.out.println("\nI gave you $" + moneyAmount + "\n");
              moneyAmount = 0;
          }

          public static void remainingAction() {
              System.out.println("\nThe coffee machine has:\n" +
                      waterAmount + " of water\n" +
                      milkAmount + " of milk\n" +
                      coffeeBeanAmount + " of coffee beans\n" +
                      cupAmount + " of disposable cups\n" +
                      "$" + moneyAmount + " of money\n");
          }

      /*    public static void ingredientRequest() {
              System.out.println("Write how many ml of water the coffee machine has:");
              waterAmount += scanner.nextInt();

              System.out.println("Write how many ml of milk the coffee machine has:");
              milkAmount += scanner.nextInt();

              System.out.println("Write how many grams of coffee beans the coffee machine has:");
              coffeeBeanAmount += scanner.nextInt();
          }*/
      /*
          public static void userCoffeeRequest() {
              System.out.println("Write how many cups of coffee you will need:");
              int numberRequest = scanner.nextInt();
              int validAmount = availableCupOfCoffee(waterAmount, milkAmount, coffeeBeanAmount);
              String requestApproved = "Yes, I can make that amount of coffee";
              if (numberRequest > validAmount) {
                  System.out.println("No, I can make only " + validAmount + " cup(s) of coffee");
              } else if (numberRequest == validAmount) {
                  System.out.println(requestApproved);
              } else {
                  System.out.println(requestApproved + " (and even " + (validAmount - numberRequest) + " more than that)");
              }
          }*/


      /*
          private static int availableCupOfCoffee(int water, int milk, int coffeeBean) {
              int waterAv = water / 200;
              int milkAv = milk / 50;
              int beanAv = coffeeBean / 15;
              int availableCoffee = waterAv < milkAv ? (Math.min(waterAv, beanAv)) : (Math.min(milkAv, beanAv));
              if (availableCoffee > 0) {
                  return availableCoffee;
              } else {
                  return availableCoffee;
              }
          }

          public static void makeCoffee() {
              System.out.println("Starting to make a coffee\n" +
                      "Grinding coffee beans\n" +
                      "Boiling water\n" +
                      "Mixing boiled water with crushed coffee beans\n" +
                      "Pouring coffee into the cup\n" +
                      "Pouring some milk into the cup\n" +
                      "Coffee is ready!");
          }

       */
      }
    learner_created: true
  - name: src/machine/TypesOfCoffee.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/33/stages/180/implement">JetBrains
    Academy</a>
  time: Wed, 22 Jul 2020 12:35:53 UTC
record: -1
